Task 0:

The runtime for looking up the value of the first text and the last call is O(1). That is because the address is at a specific location and once that location is computed, based on the size of the entries, the retrieval happens in constant time. There is no need to look through other entries in the tables.


Task 1:

Loop through each file O(N) + O(M), creating an array of phone numbers (there are 2 numbers per line). Then convert the arrays into sets and add the lengths. Converting to sets happens by calling set(), but may incur another O(N) + O(M). So the runtime is 2(O(N+M)) which can be simplified to O(N+M).


Task 2:

Loop through the calls O(N) and tally duration spent on phone for both caller and receiver,
with tally kept in a dict. Then find the max duration in the dictionary (most likely less than O(N), since many numbers repeat in the file, but worst case would be O(N)). See if any other values have same max value O(N). The total runtime, then, is 3 * O(N), which can be simplified to O(N).


Task 3:

Part A:
Loop through the calls O(N) and then sort them using sorted: O(F log F) + O(M log M), where F is fixed numbers and M is mobile.  Total runtime is O(N + M log M + F log F) In this case, M and F are quite small since there are not that many area codes and mobile prefixes compared to the number of phone numbers in the file, so perhaps we can say that the running time is closer to O(N) in this case. However, in a worse case, M + F would be as big as N and the running time would be O(N + F log F + M log M) or
O(N + N log N). As N gets very large, N log N will dominate and the runtime will be O(N log N).


Part B:
Part B piggybacked on the loop already used for Part A, but the running time to compute just part B alone would be O(N), because it requires a loop through all the calls in the file.


Task 4:

To find possible telemarketers, loop through calls list O(N), keeping track of unique callers in a dictionary.
If a number is repeated, no new dictionary key will be created. Next, loop through the callers again, and
if a receiving call had been on the suspect list, delete it: O(N). Now, loop through the texts and remove
any numbers from the dict that sent or received texts O(M). Finally sort the keys O(N log N) and produce the final output. The total runtime for this algorithm is O(N) + O(N) + O(M) (assuming worst case of not eliminating any
numbers from the suspect telemarketer list). Add on to this the cost of sorting the final list, which is worst case O(N log N). The total runtime  is [2* O(N)] + O(M) + O(N log N) or O(N log N) for extremely large N.





