Task 0:

The runtime for looking up the value of the first text and the last call is O(1). That is because the address is at a specific location and once that location is computed, based on the size of the entries, the retrieval happens in constant time. There is no need to look through other entries in the tables.


Task 1:

Loop through each file O(N) + O(M), creating an array of phone numbers (there are 2 numbers per line). Then convert the arrays into sets and add the lengths. Converting to sets happens by calling set(), but may incur another O(N) + O(M). So the runtime is 2(O(N+M)) which can be simplified to O(N+M).


Task 2:

Loop through the calls O(N) and tally duration spent on phone for both caller and receiver,
with tally kept in a dict. Then find the max duration in the dictionary (most likely less than O(N), since many numbers repeat in the file, but worst case would be O(N)). See if any other values have same max value O(N). The total runtime, then, is 3 * O(N), which can be simplified to O(N).


Task 3:

Part A:
Loop through the calls O(N) and then sort them using sorted: O(F log F) + O(M log M), where F is fixed numbers and M is mobile.  Total runtime is O(N + M log M + F log F) In this case, M and F are quite small since there are not that many area codes and mobile prefixes compared to the number of phone numbers in the file, so perhaps we can say that the running time is closer to O(N) in this case. However, in a worse case, M + F would be as big as N and the running time would be O(N + F log F + M log M) or
O(N + N log N). As N gets very large, N log N will dominate and the runtime will be O(N log N).


Part B:
Part B piggybacked on the loop already used for Part A, but the running time to compute just part B alone would be O(N), because it requires a loop through all the calls in the file.


Task 4:

To find possible telemarketers, loop through calls list O(N), keeping track of unique callers in a set, and adding receiving calls to a disqualifying dict. Then loop through the texts list O(M), to find disqualifying numbers, and add these to the disqualifying dict. Loop through the unique callers O(less than N) and if number not in the disqualifying dict, add to list of possible telemarketers. Finally print the list of possible telemarketers O(T). In the worst case, every number on the call list is a telemarketer and also each one is a different number, and we have
O(N) + O(M) + O(N) + O(N) or 3* O(N) + O(M) which can be simplified to O(N + M).




